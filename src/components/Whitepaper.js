import React from 'react';

const Whitepaper = () => (
  <div>
    <h1>OTC.mx: Trustless, Peer-to-Peer Options Trading on Ethereum</h1>
    <p>Version 0.1: October 3, 2019</p>
    <h2>Introduction</h2>
      <p>We present a protocol for trustless, peer-to-peer ERC20 options trading across arbitrary token pairs. The protocol supports American and European call options, as well as <i>silent</i> call options that do not reveal their strike price until exercised. Since the token pairs are arbitrary, the protocol can also support put options by simply switching the base and asset tokens and strike price. While this protocol somewhat resembles the <a href="https://whitepaper.dydx.exchange/">dYdX Options Protocol</a>, the OTC.mx protocol is the first options protocol to release public, open-source smart contracts. We then present a minimal application to interact with the protocol, allowing users to create option contracts and share them with a hyperlink. This application's functionality is reminiscent of that of <a href="https://trader.airswap.io/">AirSwap Trader</a>, but allows users to trade options rather than tokens. Finally, we outline next steps for both the protocol and application.</p>
    <h2>Protocol</h2>
      <h3>Call Options</h3>
        <p>OTC.mx's smart contract suite includes an <code>option_factory</code> contract, handling the creation of a new option, and a <code>call_option</code> contract, handling the rest of the option's lifecycle.</p>
        <p>The <code>option_factory</code> contract contains the method for the creation of an option contract, <code>createOption</code>. This method takes as arguments the parameters of the new contract: <code>issuer</code> and <code>buyer</code>, the addresses of the contract's parties; <code>base_addr</code> and <code>asset_addr</code>, the addresses of the base and asset tokens; <code>fee</code> the fee charged by the issuer to the buyer for issuing the contract; <code>strike_price_base</code> and <code>strike_price_quote</code>, a pair specifying the strike price, such that <i><code>(strike_price_base</code> * base_volume = <code>strike_price_quote</code> * asset_volume)</i>, where <i>base_volume</i> and <i>asset_volume</i> represent the volumes of the base and asset tokens traded; <code>volume</code>, the total volume of the asset for which the buyer has bought the option; and <code>maturity_time</code> and <code>expiry_time</code>, the Unix timestamps for the beginning and end of the period in which the option can be exercised. The method returns the address of the newly created option contract.</p>
        <p>The <code>call_option</code> contract specifies the majority of the option's logic and lifecycle. To minimize the potential for security exploits, the contract does not rely on the <code>approve</code>-<code>transferFrom</code> architecture employed by other contracts, instead requiring users to directly <code>transfer</code> whatever tokens they wish to trade to the contract. It contains four user-facing methods for the best-case lifecycle: <code>check_collateralization()</code>, which asserts that that the contract possesses sufficient quantities of the asset token and marks the option as collateralized; <code>relay_fee()</code>, which asserts that the issuance fee has been paid, relays the fee to the issuer, and marks the option as active; <code>exercise()</code>, which sends the buyer a volume of asset tokens commensurate to the contract's balance of base tokens, then sends the issuer the entire balance of base tokens, and can be called repeatedly until the initial <code>volume</code> of asset tokens is depleted or the contract is expired; and <code>expire()</code> which marks the contract as expired and refunds the issuer on any unclaimed asset tokens. It also contains two withdrawal functions, <code>withdraw_excess_base(amount)</code> and <code>withdraw_excess_asset(amount)</code>, in case any excess tokens are sent to the contract by the buyer or issuer, respectively. Finally, it contains a convenience function <code>get_info()</code> that returns the contract's parameters. </p>
      <h3>Silent Call Options</h3>
        <p>OTC.mx also offers silent call options, which do not reveal the strike price until exercised. This functionality is useful for issuers who want to tailor their prices to different buyers' willingness to pay, buyers who wish to arbitrage market inefficiencies, and traders who wish to perform large trades without moving the market. From an implementation perspective, the silent call option protocol functions nearly identically to the call option protocol. However, instead of specifying the base-quote strike price pair on initialization, only the hashes of the base-quote strike price pair are committed on initialization, with additional salt to prevent brute-forcing. This conceals the strike price until <code>exercise(strike_price_base, strike_price_quote, salt)</code> is called, exercising the option with the specified parameters if and only if the hashes of the revealed values are equal to the committed values.</p>
    <h2>Application</h2>
      <p>The application, available at <a href="/">https://otc.mx</a>, allows users to interact with the protocol's smart contract suite, and supports both call options and silent call options. Because it opts for simplicity over flexibility, it makes several choices for the user: token transfers are handled by the application automatically where needed; and upon the creation of an option, the contract is immediately collateralized. The application allows users to create a contract, share the contract they created by sending a link, and perform all further operations on that contract from that link, allowing for simple over the counter options trading.</p>
    <h2>Next Steps</h2>
      <p>In the near future, we plan to extend the existing contracts to allow for cash-settlement in the base token when both the buyer and issuer can agree on a settlement price. This eliminates the need for the buyer to hold the asset token, which would constitute physical settlement. The contract suite can also be expanded in multiple additional directions. One potential extension is to allow buyers to sell their claims to other interested parties, either fractionally through an ERC20-like interface, or in total through a simpler transfer function. Similarly, it would be simple to extend the protocol to allow option issuers to trade their claims on the collateral in the event that the option is not exercised. The protocol may also be extended to allow for futures trading. Because the Vyper language does not currently support inheritance, somewhat limiting the scaling potential of the contract suite, it may soon be necessary to move the codebase to Solidity.</p>
      <p>The application will soon support put options and silent put options, which will be simply be a wrapper for users to interact with the existing call option and silent call option contracts without having to reformat their inputs.</p>
  </div>
);

export default Whitepaper;
